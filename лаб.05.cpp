/*
    –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Ññ5
    –í–∞—Ä–∏–∞–Ω—Ç 26
    –°—Ç—É–¥–µ–Ω—Ç –û—Å—Ç–∞–Ω–∏–Ω –°.–ê; –≥—Ä—É–ø–ø–∞ –ü–ò-–≠
    –ó–∞–¥–∞—á–∞:
    –î–∞–Ω—ã —á–µ—Ç—ã—Ä–µ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ ùëé, ùëè, ùëê, ùëë. –ù–∞–π—Ç–∏ 
    —Å—Ä–µ–¥–∏ –Ω–∏—Ö –≤—Å–µ —Ç—Ä–æ–π–∫–∏ –ü–∏—Ñ–∞–≥–æ—Ä–∞.
*/

#include <iostream>
#include <cmath>
#include <locale.h>

using namespace std;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è—é—Ç—Å—è –ª–∏ —Ç—Ä–∏ —á–∏—Å–ª–∞ —Ç—Ä–æ–π–∫–æ–π –ü–∏—Ñ–∞–≥–æ—Ä–∞
bool isTriple(double x, double y, double z) {
    return (abs(x * x + y * y - z * z) == 0);  
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –≤—ã–≤–æ–¥–∞ —Ç—Ä–æ–µ–∫ –ü–∏—Ñ–∞–≥–æ—Ä–∞ 
void findTriples(double a, double b, double c, double d) {
    bool found = false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Ç—Ä–æ–π–∫–∏
    if (isTriple(a, b, c)) {
        cout << "–¢—Ä–æ–π–∫–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞: (" << a << ", " << b << ", " << c << ")"<<endl;
        found = true;
    }
    if (isTriple(a, b, d)) {
        cout << "–¢—Ä–æ–π–∫–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞: (" << a << ", " << b << ", " << d << ")"<<endl;
        found = true;
    }
    if (isTriple(a, c, d)) {
        cout << "–¢—Ä–æ–π–∫–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞: (" << a << ", " << c << ", " << d << ")"<<endl;
        found = true;
    }
    if (isTriple(b, c, d)) {
        cout << "–¢—Ä–æ–π–∫–∞ –ü–∏—Ñ–∞–≥–æ—Ä–∞: (" << b << ", " << c << ", " << d << ")"<<endl;
        found = true;
    }

    if (!found) {
        cout << "–¢—Ä–æ–π–∫–∏ –ü–∏—Ñ–∞–≥–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."<<endl;
    }
}

int main() {
    setlocale(LC_ALL, "Russian");
    
    double a, b, c, d;

    cout << "–í–≤–µ–¥–∏—Ç–µ —á–µ—Ç—ã—Ä–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ (a, b, c, d): "<<endl;
    cin >> a >> b >> c >> d;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if (a <= 0 || b <= 0 || c <= 0 || d <= 0) {
        cout << "–í—Å–µ —á–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏."<<endl;
        return 1;
    }

    // –ü–æ–∏—Å–∫ —Ç—Ä–æ–µ–∫ –ü–∏—Ñ–∞–≥–æ—Ä–∞
    findTriples(a, b, c, d);

    return 0;
}
