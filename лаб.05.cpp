
/*
    –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Ññ5
    –í–∞—Ä–∏–∞–Ω—Ç 26
    –°—Ç—É–¥–µ–Ω—Ç –û—Å—Ç–∞–Ω–∏–Ω –°.–ê; –≥—Ä—É–ø–ø–∞ –ü–ò-–≠
    –ó–∞–¥–∞—á–∞:
    –î–∞–Ω—ã —á–µ—Ç—ã—Ä–µ –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ ùëé, ùëè, ùëê, ùëë. –ù–∞–π—Ç–∏ 
    —Å—Ä–µ–¥–∏ –Ω–∏—Ö –≤—Å–µ —Ç—Ä–æ–π–∫–∏ –ü–∏—Ñ–∞–≥–æ—Ä–∞.
*/


#include <iostream>
#include <cmath>
#include <vector>
#include <tuple>
#include <locale.h>

using namespace std;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç—Ä–æ–π–∫–∞ –ü–∏—Ñ–∞–≥–æ—Ä–æ–≤–æ–π
bool isPythagoreanTriple(double x, double y, double z) {
    return (abs(x * x + y * y - z * z) == 0);  
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –ü–∏—Ñ–∞–≥–æ—Ä–æ–≤—ã—Ö —Ç—Ä–æ–µ–∫
vector<tuple<double, double, double>> findPythagoreanTriples(double a, double b, double c, double d) {
    vector<tuple<double, double, double>> triples;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ç—Ä–æ–µ–∫
    if (isPythagoreanTriple(a, b, c)) {
        triples.emplace_back(make_tuple(a, b, c));
    }
    if (isPythagoreanTriple(a, b, d)) {
        triples.emplace_back(make_tuple(a, b, d));
    }
    if (isPythagoreanTriple(a, c, d)) {
        triples.emplace_back(make_tuple(a, c, d));
    }
    if (isPythagoreanTriple(b, c, d)) {
        triples.emplace_back(make_tuple(b, c, d));
    }

    return triples;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–∏—Ñ–∞–≥–æ—Ä–æ–≤—ã—Ö —Ç—Ä–æ–µ–∫
void printPythagoreanTriples(const vector<tuple<double, double, double>>& triples) {
    if (triples.empty()) {
        cout << "–ù–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ü–∏—Ñ–∞–≥–æ—Ä–æ–≤—ã—Ö —Ç—Ä–æ–µ–∫." << endl;
    } else {
        cout << "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ü–∏—Ñ–∞–≥–æ—Ä–æ–≤—ã —Ç—Ä–æ–π–∫–∏:" << endl;
        for (const auto& triple : triples) {
            cout << "(" << get<0>(triple) << ", " << get<1>(triple) << ", " << get<2>(triple) << ")" << endl;
        }
    }
}

int main() {
    setlocale(LC_ALL, "Russian");
    
    double a, b, c, d;

    cout << "–í–≤–µ–¥–∏—Ç–µ —á–µ—Ç—ã—Ä–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —á–∏—Å–ª–∞ (a, b, c, d): ";
    cin >> a >> b >> c >> d;

    auto foundTriples = findPythagoreanTriples(a, b, c, d);
    printPythagoreanTriples(foundTriples);

    return 0;
}
    
